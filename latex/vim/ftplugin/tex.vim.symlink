" Only do this when not done yet for this buffer
if exists("b:did_tex")
  finish
endif
let b:did_tex = 1

" mappings
imap <silent> <buffer> __ _{}<Left>
imap <silent> <buffer> ^^ ^{}<Left>

" show typos
setlocal spell

" LatexBox {{{

" compile options & viewer {{{
" Extension of the output file. One of "pdf", "dvi" or "ps".
let g:LatexBox_output_type="pdf"

" Viewer application for the output file, e.g., "xpdf".
let g:LatexBox_viewer="okular"

" enable autocompiling
let b:Latex_autocompile=1

" enable background compiling
let g:LatexBox_latexmk_async=1

" set time of inactivity after which autocompile is triggered in ms
set updatetime=2000

" autocompile
function! b:toggleAutocompile()
  if b:Latex_autocompile == 0
    let b:Latex_autocompile = 1
    echo "latex autocompile on"
  else
    let b:Latex_autocompile = 0
    echo "latex autocompile off"
  endif
endfunction
nnoremap <buffer> <silent> <localleader>lac :call b:toggleAutocompile()<Cr>

function! b:saveAndCompile()
  if (b:Latex_autocompile != 0) && &modified
    silent write
    silent Latexmk
  endif
endfunction
autocmd CursorHold <buffer> call b:saveAndCompile()

" control evince
let b:evince_current_page = 1

function! b:evince_showCurrentPage()
  call system('evince ' . LatexBox_GetOutputFile() . ' -p ' . b:evince_current_page)
endfunction
nnoremap <buffer> <localleader>lc :call b:evince_showCurrentPage()<Cr>


function! b:evince_showNextPage()
  let b:evince_current_page += 1
  call b:evince_showCurrentPage()
endfunction
nmap <buffer> <localleader>ln :call b:evince_showNextPage()<Cr>

function! b:evince_showPreviousPage()
  let b:evince_current_page -= 1
  call b:evince_showCurrentPage()
endfunction
nnoremap <buffer> <silent> <localleader>lp :call b:evince_showPreviousPage()<Cr>
" }}}

" folding {{{
let g:LatexBox_Folding=1
" }}}

" latex box mappings {{{
imap <buffer> ]]     <Plug>LatexCloseCurEnv
nmap <buffer> <F5>   <Plug>LatexChangeEnv
vmap <buffer> <F7>   <Plug>LatexWrapSelection
vmap <buffer> <S-F7> <Plug>LatexEnvWrapSelection

map  <silent> <buffer> ¶ :call LatexBox_JumpToNextBraces(0)<CR>
map  <silent> <buffer> § :call LatexBox_JumpToNextBraces(1)<CR>
imap <silent> <buffer> ¶ <C-R>=LatexBox_JumpToNextBraces(0)<CR>
imap <silent> <buffer> § <C-R>=LatexBox_JumpToNextBraces(1)<CR>
" }}}

" }}}
" vim: ft=vim foldmethod=marker
